github_issues:
  project_name: DeepRead
  version: 1.0
  date: 2025-05-03

  issues:
    - id: ISSUE-016
      title: "[UserStory] ライブラリ検索バックエンド実装 (US-LIB-002)"
      description: ユーザーストーリー US-LIB-002 のためのバックエンドAPIを実装する。キーワードに基づいてドキュメントを検索する。
      tasks:
        - "[ ] `SearchLibraryDocuments` ユースケース（Interactor）の実装 (`layer:usecase`)"
        - "[ ] 全文検索エンジン（PostgreSQL FTS or Elasticsearch等）へのクエリ実行処理 (`layer:usecase` -> `adapter-search`) - **Depends on: `TASK-SEARCH-01`**"
        - "[ ] 検索結果のランキング/ソート処理 (`layer:usecase`)"
        - "[ ] APIエンドポイント（例: `/api/library/search`）の実装 (`layer:adapter-ui` or `layer:usecase`)"
        - "[ ] 応答データのシリアライズ (`layer:adapter-ui` or `layer:usecase`)"
        - "[ ] （TDD）ユースケース、検索ロジックのテスト (`type:test`, `TDD`)"
      acceptance_criteria:
        - APIにキーワードを渡すと、関連するドキュメントリストが（関連度順等で）返されること。
        - 応答時間は目標値を満たすこと。
        - 関連するテストが成功すること。
      related_requirements: [US-LIB-002]
      dependencies: [ISSUE-014, TASK-SEARCH-01]
      milestone: "MVP Library & Search"
      labels: [type:user-story, feature:library, layer:usecase, layer:adapter-search, epic:EPIC-LIBRARY, MVP, priority:high, TDD]
    - id: ISSUE-017
      title: "[UserStory] ドキュメントへのタグ付け機能実装 (US-LIB-003)"
      description: |
        ユーザーストーリー US-LIB-003 を実装する。ドキュメントへのタグ追加・削除・フィルタリング機能を提供する。
        > DeepReadのユーザ として、ライブラリ内のドキュメントにタグを付けて整理したい。それは、後で関連するドキュメントをグループ化して見つけやすくするためだ。
      tasks:
        - "[ ] `Tag` ドメインモデル（または値オブジェクト）定義 (`layer:domain`, `DDD`)"
        - "[ ] `Document` 集約にタグ関連付けを追加 (`layer:domain`)"
        - "[ ] `AddTagToDocument`, `RemoveTagFromDocument` ユースケース実装 (`layer:usecase`)"
        - "[ ] タグによるドキュメントフィルタリングロジック (`GetLibraryDocuments` ユースケース拡張 or 新規UseCase) (`layer:usecase`)"
        - "[ ] DBスキーマ変更（タグ、中間テーブル）とアダプタ実装 (`layer:adapter-db`)"
        - "[ ] ライブラリUIでのタグ表示、追加/削除UI、フィルタリングUI実装 (`layer:adapter-ui`)"
        - "[ ] （TDD）関連ドメイン、ユースケース、リポジトリのテスト (`type:test`, `TDD`)"
      acceptance_criteria:
        - UIからドキュメントに任意のタグを追加・削除できること。
        - 付与されたタグが表示されること。
        - 特定のタグでドキュメントをフィルタリングできること。
        - 関連するテストが成功すること。
      related_requirements: [US-LIB-003]
      dependencies: [ISSUE-013, ISSUE-014]
      milestone: "MVP Library & Search"
      labels: [type:user-story, feature:library, layer:domain, layer:usecase, layer:adapter-db, layer:adapter-ui, epic:EPIC-LIBRARY, MVP, priority:medium, TDD, DDD]
    - id: ISSUE-018
      title: "[UserStory] 単一文書Q&A UIの実装 (US-QA-001)"
      description: |
        ユーザーストーリー US-QA-001 のためのUIを実装する。チャットインターフェースを提供し、応答と出典を表示する。
        > DeepReadのユーザ として、特定のドキュメントを開き、その内容について自然言語で質問したい。それは、ドキュメント全体を読まなくても、知りたい情報をピンポイントで得られるようにするためだ。
      tasks:
        - "[ ] ドキュメント表示画面内にチャットパネルUIを実装 (`layer:adapter-ui`)"
        - "[ ] 質問入力、送信ボタン、回答表示エリアの作成 (`layer:adapter-ui`)"
        - "[ ] 質問送信時にバックエンドAPIを呼び出す処理 (`layer:adapter-ui`)"
        - "[ ] バックエンドからの応答（回答、出典）を表示する処理 (`layer:adapter-ui`)"
        - "[ ] 出典情報（例: 類似QA ID）から関連情報へのリンクやハイライト表示を実装 (`layer:adapter-ui`)"
        - "[ ] 処理中の進捗表示 (`layer:adapter-ui`)"
        - "[ ] Q&A履歴のスクロール表示 (`layer:adapter-ui`)"
      acceptance_criteria:
        - ユーザが質問を入力・送信すると、回答がチャットエリアに表示されること。
        - 回答には出典情報（リンク等）が付与されていること。
        - 処理中は進捗が表示されること。
      related_requirements: [US-QA-001]
      dependencies: [ISSUE-QA-BACKEND] # Depends on backend QA implementation
      milestone: "MVP Core QA"
      labels: [type:user-story, feature:qa, layer:adapter-ui, epic:EPIC-QA-CORE, MVP, priority:high]
    - id: ISSUE-019
      title: "[UserStory] 単一文書Q&A機能のコア実装 (US-QA-001)"
      description: |
        ユーザーストーリー US-QA-001 のコア機能（類似QA検索・要約による応答）を実装する。 **[優先度: 高]**
      tasks:
        - "[ ] `AskQuestion` ユースケース（Interactor）のインターフェースと実装（RAGパイプライン呼び出し、履歴保存） (`layer:usecase`)"
        - "[ ] RAGパイプライン内での類似Q&A検索ロジック実装（ベクトルDB利用） (`layer:usecase` -> `adapter-search`) - **Depends on: `TASK-VEC-01`**"
        - "[ ] 検索された類似Q&A回答群を要約・統合するためのAI呼び出しロジック実装 (`layer:usecase` -> `adapter-ai`) - **Depends on: `TASK-AI-01`**"
        - "[ ] `QApair` 値オブジェクト、`UserInteraction` 集約の更新 (`layer:domain`, `DDD`)"
        - "[ ] Q&A履歴を保存するためのリポジトリ/アダプタ実装 (`layer:usecase`, `layer:adapter-db`)"
        - "[ ] （TDD）`AskQuestion` ユースケース、RAG関連ロジックの単体・結合テスト (`type:test`, `TDD`)"
      acceptance_criteria:
        - ユーザが質問を送信すると、システムが類似QAを検索し、AIが要約・統合した回答を（目標時間内に）返すこと。
        - 回答には可能な範囲で出典情報が付与されること。
        - Q&A履歴がDBに保存されること。
        - 類似QAが見つからない場合の代替フローが動作すること（MVP後検討）。
        - 関連するテストが成功すること。
      related_requirements: [US-QA-001]
      dependencies: [TASK-AI-01, TASK-VEC-01, TASK-BATCH-01, ISSUE-QA-UI] # QAデータ生成, UI実装Issue
      milestone: "MVP Core QA"
      labels: [type:user-story, feature:qa, layer:usecase, layer:domain, layer:adapter-ai, layer:adapter-search, layer:adapter-db, epic:EPIC-QA-CORE, MVP, priority:high, TDD, DDD, CleanArchitecture, RAG]
      notes: '[分割案あり] RAGパイプライン実装、類似QA検索、AI要約呼び出し、履歴保存など、詳細タスクに分割推奨。'
    - id: ISSUE-020
      title: "[TechnicalTask] クリーンアーキテクチャ設計定義 (TASK-ARCH-01)"
      description: |
        技術タスク TASK-ARCH-01 を実施する。システムのレイヤー構造、主要コンポーネント、依存関係ルールを文書化し、チームで共有する。
      tasks:
        - "[ ] レイヤー（Domain, UseCase, Adapters[UI, DB, Search, AI, etc.], Infrastructure）の責務定義。"
        - "[ ] 主要ドメインモデルと集約の図示（初期案）。"
        - "[ ] 主要ユースケースとInteractorのリストアップ。"
        - "[ ] レイヤー間のインターフェース（リポジトリ、ゲートウェイ）定義方針。"
        - "[ ] 依存関係の方向性ルール（例: Domainは他レイヤーに依存しない）の明確化。"
        - "[ ] 設計ドキュメント作成（例: Markdown, 図ツール）。"
      acceptance_criteria:
        - アーキテクチャ設計が文書化され、チームメンバーが理解・合意していること。
      related_requirements: [TASK-ARCH-01]
      dependencies: []
      milestone: "MVP Foundation"
      labels: [type:technical-task, architecture, layer:architecture, epic:EPIC-ARCH-NFR, MVP, priority:high, CleanArchitecture, DDD]