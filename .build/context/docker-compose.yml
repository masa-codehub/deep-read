services:
  deep-read:
    build:
      context: ./${PROJECT_NAME}/.build
      dockerfile: Dockerfile
    image: ${PROJECT_NAME}_image
    volumes:
      - ./${PROJECT_NAME}:${CONTAINER_VOLUME:-/app}
    working_dir: ${CONTAINER_VOLUME:-/app}
    environment:
      - PROJECT_NAME=${PROJECT_NAME}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-django-insecure-default-key}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-app.settings.development}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - DATABASE_URL=${PG_ENDPOINT:-postgres://postgres:postgres@db:5432/deepread}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - QDRANT_HOST=${QDRANT_HOST:-qdrant}
      - QDRANT_PORT=${QDRANT_CON_PORT:-6333}
      - QDRANT_TIMEOUT=${QDRANT_TIMEOUT:-10}
    # command: ["bash", "run.sh"]
    # command: python manage.py runserver 0.0.0.0:8000
    ports:
      - ${DJANGO_HOST_PORT:-8000}:${DJANGO_CON_PORT:-8000}
    stdin_open: true
    tty: true
    depends_on:
      - redis
      - postgres
      - qdrant
    restart: always

  react-frontend:
    build:
      context: ./${PROJECT_NAME}/.build
      dockerfile: node.Dockerfile
    image: ${PROJECT_NAME}_frontend_image
    volumes:
      - ./${PROJECT_NAME}/frontend:${CONTAINER_VOLUME:-/app}
    working_dir: ${CONTAINER_VOLUME:-/app}
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:5173}
      - BROWSER=${BROWSER:-none}
    ports:
      - ${REACT_HOST_PORT:-5173}:${REACT_CON_PORT:-5173}
    stdin_open: true
    tty: true
    depends_on:
      - deep-read
    restart: always

  postgres:
    build:
      context: ./${POSTGRESQL}/.build
      dockerfile: Dockerfile
      args:
        - PGPORT=${PG_CON_PORT:-5432}
    image: ${POSTGRESQL}_image
    volumes:
      - postgres_volume:${PG_VOLUME:-/var/lib/postgresql/data}
      - ./${POSTGRESQL}/init:/init
    working_dir: ${PG_VOLUME:-/var/lib/postgresql/data}
    restart: always
    environment:
      - POSTGRES_HOST=${PG_HOST:-postgres}
      - POSTGRES_DB=${PG_DB:-my_db}
      - POSTGRES_USER=${PG_USER:-my_id}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-my_password}
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
      - PGPORT=${PG_CON_PORT:-5432}
      # - LOGGING_LEVEL=DEBUG
    ports:
      - ${PG_HOST_PORT:-5432}:${PG_CON_PORT:-5432}
  redis:
    image: "redis:7-alpine"
    container_name: deepread-redis
    ports:
      - 127.0.0.1:${REDIS_HOST_PORT:-6379}:${REDIS_CON_PORT:-6379} # localhostからのみアクセス可能に
    volumes:
      - redis_data:${REDIS_VOLUME:-/data}
    restart: always

  celery_worker:
    build:
      context: ./${PROJECT_NAME}/.build
      dockerfile: Dockerfile
    container_name: deepread-celery-worker
    # 開発用は -P solo、本番検討は -P gevent -c {CPUコア数}
    command: celery -A app.celery worker -l info -P solo
    volumes:
      - ./${PROJECT_NAME}:${CONTAINER_VOLUME:-/app}
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE:-app.settings.development}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-django-insecure-default-key}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - DATABASE_URL=${PG_ENDPOINT:-postgres://postgres:postgres@db:5432/deepread}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - QDRANT_HOST=${QDRANT_HOST:-qdrant}
      - QDRANT_PORT=${QDRANT_CON_PORT:-6333}
      - QDRANT_TIMEOUT=${QDRANT_TIMEOUT:-10}
    stdin_open: true
    tty: true
    depends_on:
      - redis
      - qdrant
      - postgres
    restart: always
    
  qdrant:
    image: qdrant/qdrant:latest
    container_name: deepread-qdrant
    ports:
      # gRPC ポート (クライアント接続用) - ホストのローカルホストにのみ公開
      - 127.0.0.1:${QDRANT_HOST_GRPC_PORT:-6333}:${QDRANT_CON_GRPC_PORT:-6333}
      # REST API ポート (デバッグやUI用) - ホストのローカルホストにのみ公開
      - 127.0.0.1:${QDRANT_HOST_REST_PORT:-6334}:${QDRANT_CON_REST_PORT:-6334}
    volumes:
      # 名前付きボリュームをマウントしてデータを永続化
      - qdrant_storage:${QDRANT_VOLUME:-/qdrant/storage}
    restart: always

volumes:
  postgres_volume:
  redis_data:
  qdrant_storage:
    driver: local