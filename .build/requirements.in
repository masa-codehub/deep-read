# .build/requirements.in

# --- Application Dependencies ---
# アプリケーションの実行に必須のライブラリ
# pip-compile によって requirements.txt に依存関係も含めて書き出されます

django               # Django フレームワーク
django-csp         # Django 用の CSP (Content Security Policy) ミドルウェア
dj-database-url      # Django 用のデータベース URL パーサー

pdf2image   # 

cryptography        # 暗号化ライブラリ (Django Secret Key の生成に使用)

# 非同期処理基盤
celery>=5.3.0       # 非同期タスクキューフレームワーク
redis>=4.5.0        # メッセージブローカー用Redisクライアント

langchain               # LangChainコアフレームワーク (LLMアプリケーション構築用)
langchain-core
langchain-community
langchain-openai        # LangChain用 OpenAI (ChatGPT) 連携ライブラリ
langchain-google-genai  # LangChain用 Google Generative AI (Gemini) 連携ライブラリ
pydantic-settings       # Pydanticを利用した設定管理 (環境変数/.env読み込み, 型検証)
python-dotenv           # .env ファイルから環境変数を読み込む (pydantic-settingsが内部で利用)

# ベクトルデータベース
qdrant-client>=1.7.0    # Qdrant ベクトルデータベースクライアント


# --- Development Dependencies ---
# 開発時にのみ使用するツール (テスト, Lint, Format, 依存関係管理等)
# 本番環境のイメージには含めないことが望ましいが、今回は含める方針

pip-tools               # requirements.in から requirements.txt を生成するツール
pytest                  # テストフレームワーク
pytest-cov            # pytest 用のカバレッジ測定ツール
pytest-django       # Django 用の pytest プラグイン
ruff                    # 高速な Linter & Formatter
mypy                    # 静的型チェッカー

# 静的コード解析ツール
flake8          # コードの静的解析ツール
flake8-bugbear  # Flake8の追加バグ検出プラグイン
flake8-docstrings  # ドキュメント文字列チェック用プラグイン
pylint          # より詳細な静的コード解析ツール
pylint-django    # Django用Pylintプラグイン
pytest-flake8    # pytest用Flake8プラグイン
pytest-pylint   # pytest用Pylintプラグイン
pre-commit             # コミット前チェックツール

# 他に必要な開発ツールがあれば以下に追加
#例:
# ipython
